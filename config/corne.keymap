/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/backlight.h>  // Adicionado para controle dos LEDs por tecla

// Definições para melhorias avançadas
#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST   3
#define FUNC    4  // Nova camada de funções adicionada

// Tempo em ms para debouncing de chord e combos
#define COMBO_TERM 50
#define TAPPING_TERM 200
#define QUICK_TAP 175

// Otimização para teclados low profile
#define LP_TAP_TERM 180  // Tempo de tapping reduzido para teclas de perfil baixo

/* DESENHOS DO TECLADO POR CAMADA */

/* Camada 0 (Default) - QWERTY
 * ┌───┬───┬───┬───┬───┬───┐   ┌───┬───┬───┬───┬───┬───┐
 * │Tab│ Q │ W │ E │ R │ T │   │ Y │ U │ I │ O │ P │Bsp│
 * ├───┼───┼───┼───┼───┼───┤   ├───┼───┼───┼───┼───┼───┤
 * │Ctl│ A │ S │ D │ F │ G │   │ H │ J │ K │ L │ ; │ ' │
 * ├───┼───┼───┼───┼───┼───┤   ├───┼───┼───┼───┼───┼───┤
 * │Sft│ Z │ X │ C │ V │ B │   │ N │ M │ , │ . │ / │Esc│
 * └───┴───┴───┼───┼───┼───┤   ├───┼───┼───┼───┴───┴───┘
 *             │GUI│LWR│SPC│   │ENT│RSE│ALT│
 *             └───┴───┴───┘   └───┴───┴───┘
 */

 / {
    // Definição de macros úteis
    macros {
        email_macro: email_macro {
            label = "email_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp S &kp E &kp U &kp AT &kp E &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
        };
        
        copy_macro: copy_macro {
            label = "copy_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp C>, <&macro_release &kp LCTRL>;
        };

        cut_macro: cut_macro {
            label = "cut_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LCTRL>;
        };

        paste_macro: paste_macro {
            label = "paste_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp V>, <&macro_release &kp LCTRL>;
        };
        
        // Macro para economia de bateria - desliga LEDs e display
        power_save_macro: power_save_macro {
            label = "power_save_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &rgb_ug RGB_OFF &bl BL_OFF>;
        };
        
        // Macro para restaurar LEDs ao estado anterior
        power_restore_macro: power_restore_macro {
            label = "power_restore_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &rgb_ug RGB_ON &bl BL_ON>;
        };
    };

    // Combos - combinações de teclas para funções adicionais
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <COMBO_TERM>;
            key-positions = <0 1>;  // Tab + Q = ESC
            bindings = <&kp ESC>;
        };
        
        combo_del {
            timeout-ms = <COMBO_TERM>;
            key-positions = <10 11>;  // P + Backspace = Delete
            bindings = <&kp DEL>;
        };
        
        combo_capsword {
            timeout-ms = <COMBO_TERM>;
            key-positions = <13 16>;  // A + D = CAPSWORD
            bindings = <&caps_word>;
        };
        
        combo_bluetoothclear {
            timeout-ms = <COMBO_TERM>;
            key-positions = <1 4 7>;  // Q + R + Y = BT Clear
            bindings = <&bt BT_CLR>;
        };
        
        // Combo para modo de economia de energia
        combo_powersave {
            timeout-ms = <COMBO_TERM>;
            key-positions = <6 9>;  // Y + O = Modo Economia
            bindings = <&power_save_macro>;
        };
        
        // Combo para restaurar energia
        combo_powerrestore {
            timeout-ms = <COMBO_TERM>;
            key-positions = <7 8>;  // U + I = Restaurar Energia
            bindings = <&power_restore_macro>;
        };
        
        // Combo para acessar camada de funções
        combo_function_layer {
            timeout-ms = <COMBO_TERM>;
            key-positions = <16 19>;  // F + J = Camada de Funções
            bindings = <&mo FUNC>;
        };
    };

    // Comportamentos para tap-dance e modificadores homerow
    behaviors {
        // Comportamento para modificadores nas teclas de digitação - homerow mods
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <LP_TAP_TERM>; // Otimizado para low profile
            quick-tap-ms = <QUICK_TAP>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        // Tap-dance para teclas duplas
        td_esc_caps: tap_dance_esc_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ESC_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <LP_TAP_TERM>; // Otimizado para low profile
            bindings = <&kp ESC>, <&kp CAPS>;
        };
        
        // Comportamento para teclas de camada - otimizado para perfil baixo
        lp_lt: layer_tap_low_profile {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_LP";
            #binding-cells = <2>;
            tapping-term-ms = <LP_TAP_TERM>; // Otimizado para low profile
            quick-tap-ms = <QUICK_TAP>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };
        
        // Tap dance para controle de brilho dos LEDs
        td_bl: tap_dance_backlight {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BACKLIGHT";
            #binding-cells = <0>;
            tapping-term-ms = <LP_TAP_TERM>;
            bindings = <&bl BL_INC>, <&bl BL_DEC>, <&bl BL_TOG>;
        };
    };

    // Condicionais para alternar entre camadas
    conditional_layers {
        compatible = "zmk,conditional-layers";
        // Ativar camada ADJUST (3) quando as camadas LOWER (1) e RAISE (2) estiverem ativas
        adjust_layer_combo {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";

        /* Camada padrão (0)
         * Teclado QWERTY básico com modificadores nas teclas centrais
         */
        default_layer {
            bindings = <
                &kp TAB        &kp Q              &kp W        &kp E             &kp R              &kp T              &kp Y              &kp U           &kp I              &kp O         &kp P           &kp BSPC
                &td_esc_caps   &hm LGUI A         &hm LALT S   &hm LCTRL D       &hm LSHFT F        &kp G              &kp H              &hm RSHFT J     &hm RCTRL K        &hm RALT L    &hm RGUI SEMI   &kp SQT
                &kp LSHFT      &kp Z              &kp X        &kp C             &kp V              &kp B              &kp N              &kp M           &kp COMMA          &kp DOT       &kp FSLH        &mt RSHFT ESC
                                                               &mt LGUI TAB      &lp_lt LOWER SPACE &kp SPACE          &lp_lt RAISE RET   &mo LOWER       &kp RALT
            >;
        };

        /* Camada inferior (1)
         * Números, controles Bluetooth e símbolos de abertura
         */
        lower_layer {
            bindings = <
                &kp TAB        &kp N1           &kp N2           &kp N3          &kp N4          &kp N5              &kp N6           &kp N7         &kp N8         &kp N9          &kp N0          &kp BSPC
                &bt BT_CLR     &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4        &kp LEFT         &kp DOWN       &kp UP         &kp RIGHT       &kp HOME        &kp END
                &kp LSHFT      &kp LPAR         &kp LBKT         &kp LBRC        &kp DQT         &rgb_ug RGB_TOG     &out OUT_TOG     &kp PG_DN      &kp PG_UP      &email_macro    &kp INS         &kp DEL
                                                                 &kp LGUI        &trans          &kp SPACE           &kp RET          &trans         &kp RALT
            >;
        };

        /* Camada superior (2)
         * Símbolos e símbolos de fechamento
         */
        raise_layer {
            bindings = <
                &kp TAB     &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT        &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR   &kp BSPC
                &kp LCTRL   &trans     &trans     &trans     &trans     &trans           &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT   &kp BSLH   &kp GRAVE
                &kp LSHFT   &kp RPAR   &kp RBKT   &kp RBRC   &kp SQT    &rgb_ug RGB_EFF  &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC   &kp PIPE   &kp TILDE
                                                  &kp LGUI   &mo 3      &kp SPACE        &kp RET    &trans     &kp RALT
            >;
        };

        /* Camada de ajuste (3)
         * Controles RGB e configurações
         */
        adjust_layer {
            bindings = <
                &trans      &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_ON     &td_bl      &kp F7      &kp F8      &kp F9      &kp F10      &kp F11
                &trans      &rgb_ug RGB_EFF  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_OFF    &bl BL_TOG  &kp F4      &kp F5      &kp F6      &copy_macro  &kp F12
                &trans      &trans           &trans           &cut_macro       &paste_macro     &trans             &trans      &kp F1      &kp F2      &kp F3      &trans       &ext_power EP_TOG
                                                              &trans           &trans           &trans             &trans      &trans      &trans
            >;
        };
        
        /* Nova camada de funções (4)
         * Controles para mídia, economia de energia e funções extras
         */
        function_layer {
            bindings = <
                &trans          &kp C_PREV      &kp C_PP        &kp C_NEXT      &kp C_MUTE     &kp C_VOL_UP     &kp LG(Y)     &kp LG(Z)     &trans        &trans        &kp PSCRN     &kp LC(DEL)
                &power_save_macro &bl BL_INC    &bl BL_DEC      &bl BL_TOG      &bl BL_CYCLE   &kp C_VOL_DN     &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)    &kp LC(RIGHT) &kp LG(L)     &kp LG(R)
                &power_restore_macro &kp KP_NUM &kp SLCK        &kp CAPS        &kp INS        &kp PAUSE_BREAK  &kp LG(C)     &kp LG(X)     &kp LG(V)     &kp LG(S)     &kp LG(P)     &kp LG(O)
                                                                &trans          &trans         &trans           &trans        &trans        &trans
            >;
        };
    };
};
